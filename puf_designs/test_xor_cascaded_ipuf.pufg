begin_mod XOR_Cascaded_IPUF (num n, num k1, num k2, num k3, num k4, vec c, num s, bit en)
	y1 = XORAPUF(n,k1,c, en);
	parallel i=1 to s-1 do
		x1[i] = c[i];
	end_parallel
	x1[s] = y1;
	n1 = n+1;
	s1 = s+1;
	parallel i=s1 to n1 do
		x1[i] = c[i-1];
	end_parallel

	y2 = XORAPUF(n1,k2,x1,en);
	
	parallel i=1 to s-1 do
		x2[i] = c[i];
	end_parallel
	x2[s] = y2 XOR y1;
	n1 = n+1;
	s1 = s+1;
	parallel i=s1 to n1 do
		x2[i] = c[i-1];
	end_parallel

	y3 = XORAPUF(n1,k3,x2,en);
	
	parallel i=1 to s-1 do
		x3[i] = c[i];
	end_parallel
	y12 = y1 XOR y2;
	y123 = y3 XOR y12;
	x3[s] = y123;
	n1 = n+1;
	s1 = s+1;
	parallel i=s1 to n1 do
		x3[i] = c[i-1];
	end_parallel

	y4 = XORAPUF(n1, k4, x3, en);
	ipuf_out = y123 XOR y4;
	return ( bit ipuf_out );
end_mod XOR_Cascaded_IPUF


begin_mod XORAPUF (num n, num k, vec c, bit en)
	parallel i=1 to k do
		a[i] = APUF(n,c,en);
	end_parallel 
	xorpuf_out = 1;
	serial i=1 to k do
		xorpuf_out = xorpuf_out XOR a[i];
	end_serial
	return ( bit xorpuf_out );
end_mod XORAPUF
	
begin_mod APUF (num n, vec c, bit en)
	<t,b> = DELAY_CHAIN(n,c,en);
	apuf_out = ARBITER(t,b);
	return (bit apuf_out);
end_mod APUF

begin_mod DELAY_CHAIN (num n,vec c,bit en)
	t = en;
	b = en;
	serial i=1 to n do
		chal_bit = c[i];
		<t,b> = SWITCH_2X2 (<t,b>,chal_bit);
	end_serial
	return ( vec <t,b> );
end_mod DELAY_CHAIN

begin_mod SWITCH_2X2 (bit t_in, bit b_in, bit c_in) 
	top_out = MUX_2X1(t_in, b_in, c_in);
	bot_out = MUX_2X1(b_in, t_in, c_in);
	return (vec <top_out, bot_out>);
end_mod SWITCH_2X2