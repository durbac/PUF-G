begin_mod XORAPUF (num n, num k, vec c, bit en)
	parallel i=1 to k do
		a[i] = APUF(n,c,en);
	end_parallel
	xorpuf_out = 0;
	serial i=1 to k do
		xorpuf_out = a[i] XOR xorpuf_out;
	end_serial
	return ( bit xorpuf_out );
end_mod XORAPUF
	
begin_mod APUF (num n, vec c, bit en)
	<t,b> = DELAY_CHAIN(n,c,en);
	apuf_out = ARBITER(t,b);
	return (bit apuf_out);
end_mod APUF

begin_mod DELAY_CHAIN (num n,vec c,bit en)
	t = en;
	b = en;
	serial i=1 to n do
		chal_bit = c[i];
		<t,b> = SWITCH_2X2 (<t,b>,chal_bit);
	end_serial
	return (vec<t,b>);
end_mod DELAY_CHAIN

begin_mod SWITCH_2X2 (bit t_in, bit b_in, bit c_in) 
	top_out = MUX_2X1(t_in, b_in, c_in);
	bot_out = MUX_2X1(b_in, t_in, c_in);
	return (vec <top_out, bot_out>);
end_mod SWITCH_2X2