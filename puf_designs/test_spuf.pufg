begin_mod SPUF (num n, vec c, bit en)
	y1 = APUF(n,c,en);
	shift = n/2;
	c_shift = SHIFREG(c,n,shift);
	y2 = APUF(n,c_shift,en);
	spuf_out = y1 XOR y2;
	return ( bit spuf_out );
end_mod SPUF
	
begin_mod APUF (num n, vec c, bit en)
	<t,b> = DELAY_CHAIN(n,c,en);
	apuf_out = ARBITER(t,b);
	return (bit apuf_out);
end_mod APUF

begin_mod DELAY_CHAIN (num n,vec c,bit en)
	t = en;
	b = en;
	serial i=1 to n do
		chal_bit = c[i];
		<t,b> = SWITCH_2X2 (<t,b>,chal_bit);
	end_serial
	return (vec<t,b>);
end_mod DELAY_CHAIN

begin_mod SWITCH_2X2 (bit t_in, bit b_in, bit c_in) 
	top_out = MUX_2X1(t_in, b_in, c_in);
	bot_out = MUX_2X1(b_in, t_in, c_in);
	return (vec <top_out, bot_out>);
end_mod SWITCH_2X2

begin_mod SHIFTREG (vec c, num n, num k)
	c_shift = c;
	parallel i=1 to n do
		j = (i+k);
		j = j %n;
		c_shift[j] = c[i];
	end_parallel
	return (vec c_shift);
end_mod SHIFTREG